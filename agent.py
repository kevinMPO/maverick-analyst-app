import os

def analyze_company(company_data):
    """Analyse enrichie des donn√©es financi√®res avec contexte commercial"""
    try:
        # D√©termination du niveau de risque
        risk_level = get_risk_level(company_data)
        payment_advice = get_payment_advice(risk_level, company_data)

        analysis = f"""
> **{get_main_recommendation(risk_level, company_data)}**

---
üéØ **Analyse du Risque**
- Indiscore S&D : **{company_data.get('indiscore20', 'ND')}** / 20
- Niveau : **{risk_level}**
- Classe de risque : {company_data.get('classeRisque', 'ND')}
- Solvabilit√© : {company_data.get('solvabilite', 'ND')}

---
üìä **Analyse Financi√®re**
- CA : {format_amount(company_data.get('ca'))}
- R√©sultat net : {format_amount(company_data.get('resultat'))}
- EBE : {format_amount(company_data.get('EBE'))}
- Fonds propres : {format_amount(company_data.get('FondsPr'))}
- D√©lai clients : {company_data.get('DelaiCli', 'ND')} jours
- D√©lai fournisseurs : {company_data.get('DelaiFour', 'ND')} jours

---
üí≥ **Recommandation Cr√©dit**
- ‚úÖ **D√©lai pr√©conis√© : {payment_advice}**
- üí∂ Encours demand√© : {format_amount(company_data.get('encours'))}
- üìà Historique : {company_data.get('historique', 'ND')}
- ‚ö†Ô∏è Points de vigilance : {get_vigilance_points(company_data)}

---
üëî **Gouvernance & Conformit√©**
- Dirigeance : {company_data.get('AnalyseDirigeance', 'ND')}
- Score conformit√© : {company_data.get('ScoreConfor', 'ND')}
- Analyse conformit√© : {company_data.get('AnalyseConfor', 'ND')}

---
üì∞ **√âv√©nements Significatifs**
{company_data.get('evenements_formates', 'Aucun √©v√©nement significatif √† signaler.')}
"""
        return analysis
    except Exception as e:
        return f"‚ö†Ô∏è Erreur lors de l'analyse : {str(e)}"

def get_risk_level(data):
    """D√©termine le niveau de risque avec emoji"""
    if "Pas de risque" in data.get('solvabilite', ''):
        return "Faible üü¢"
    elif "Risque faible" in data.get('solvabilite', ''):
        return "Mod√©r√© üü°"
    return "√âlev√© üî¥"

def get_payment_advice(risk_level, data):
    """D√©termine le d√©lai de paiement recommand√©"""
    if risk_level == "Faible üü¢" and data.get('historique') == "Bonne exp√©rience":
        return "60 jours"
    elif risk_level == "Mod√©r√© üü°":
        return "30 jours avec suivi"
    return "Comptant"

def get_main_recommendation(risk_level, data):
    """G√©n√®re la recommandation principale"""
    encours = data.get('encours', 0)
    if "Faible" in risk_level:
        return f"Favorable √† l'encours de {format_amount(encours)}"
    elif "Mod√©r√©" in risk_level:
        return f"Accord sous conditions pour {format_amount(encours)}"
    return "Refus conseill√© - Risque √©lev√©"

def get_vigilance_points(data):
    """Identifie les points de vigilance"""
    points = []
    if data.get('DelaiCli', 0) > 60:
        points.append("D√©lais clients √©lev√©s")
    if data.get('FondsPr', 0) < 0:
        points.append("Fonds propres n√©gatifs")
    return " | ".join(points) if points else "RAS"

def format_amount(amount):
    """Formate les montants en k‚Ç¨ ou M‚Ç¨"""
    try:
        if not amount or amount == "ND":
            return "ND"
        amount = float(amount)
        if amount >= 1000000:
            return f"{amount/1000000:.1f}M‚Ç¨"
        elif amount >= 1000:
            return f"{amount/1000:.0f}k‚Ç¨"
        return f"{amount:.0f}‚Ç¨"
    except:
        return "ND"